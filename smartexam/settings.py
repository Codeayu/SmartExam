"""
Django settings for smartexam project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import dj_database_url
from pathlib import Path
from dotenv import load_dotenv

# Import database wrapper for MySQL (only needed in container environment)
try:
    import database_wrapper  # type: ignore
except ImportError:
    pass

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-3m9ik!1=q+qyl$hkz!=9-ql!c_^i*pcqlumr)u_7@(c14!40l6')

# SECURITY WARNING: don't run with debug turned on in production!
# Temporarily enable debug mode to help diagnose the issue
DEBUG = True

# Get the Railway-assigned URL from environment variables
RAILWAY_DOMAIN = os.environ.get('RAILWAY_PUBLIC_DOMAIN', '')

# Add Railway domains to allowed hosts
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '.railway.app']

# Add the specific Railway domain if available
if RAILWAY_DOMAIN:
    ALLOWED_HOSTS.append(RAILWAY_DOMAIN)
    ALLOWED_HOSTS.append(f'*.{RAILWAY_DOMAIN}')

# Also allow all hosts temporarily for troubleshooting
ALLOWED_HOSTS.append('*')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',  # Custom app for core functionalities
    'captcha',  # Captcha app
    'whitenoise.runserver_nostatic',  # Whitenoise for static files
]

# Custom user model
AUTH_USER_MODEL = 'core.Customuser'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Whitenoise middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.DBConnectionManagerMiddleware',  # DB connection management
    'core.middleware.SessionTimeoutMiddleware',  # Session timeout
]

# Session configuration for connection management
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 3600  # 1 hour in seconds
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_IDLE_TIMEOUT = 900  # 15 minutes in seconds

ROOT_URLCONF = 'smartexam.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # Django will automatically look for templates in each app's templates directory
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'smartexam.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use Railway's DATABASE_URL if available, otherwise use the configured MySQL database
if os.environ.get('DATABASE_URL'):
    DATABASES = {
        'default': dj_database_url.config(default=os.environ.get('DATABASE_URL'), conn_max_age=600)
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.getenv("DB_name"),
            'USER': os.getenv("USER"),
            'PASSWORD': os.getenv("PASSWORD"),
            'HOST': os.getenv("HOST"),
            'PORT': os.getenv("PORT", '3306'),
            'OPTIONS': {
                'init_command': 'SET session wait_timeout=300',  # 5 minutes timeout
                'connect_timeout': 20,  # Connection timeout in seconds
            },
            'conn_max_age': 60,  # Reduce connection lifetime to 1 minute
            'ATOMIC_REQUESTS': False,  # Avoid long-running transactions
            'AUTOCOMMIT': True,  # Ensure connections are returned to the pool quickly
            'POOL_OPTIONS': {
                'MAX_CONNS': 5,  # Explicitly limit the connection pool size
            },
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
# Path to your project directory
BASE_DIR = Path(__file__).resolve().parent.parent

STATIC_URL = '/static/'  # URL prefix for static files

# Include the path to your static folder
STATICFILES_DIRS = [
    BASE_DIR / "core" / "static",
]

# For production (where collected static files will be stored)
STATIC_ROOT = BASE_DIR / "staticfiles"

# Media files (User uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / "media"

# Configure WhiteNoise for static file serving
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# CSRF settings
CSRF_TRUSTED_ORIGINS = ['https://*.railway.app']

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')  # Gmail SMTP server
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 465))  # Changed from 587 to 465 for SSL
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'False') == 'True'  # Disabled TLS since we're using SSL
EMAIL_USE_SSL = os.environ.get('EMAIL_USE_SSL', 'True') == 'True'  # Enable SSL
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')  # Your Gmail address
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')  # Your app password
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER)
